[build-system]
requires = ["setuptools>=75.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "acme-linode-objectstorage"
version = "0.1.0"
description = "ACME ('Let's Encrypt') client for Linode Object Storage"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
keywords = [
    "acme",
    "letsencrypt",
    "linode",
    "object-storage",
    "ssl",
    "tls",
    "certificate",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Security :: Cryptography",
    "Topic :: System :: Systems Administration",
]

authors = [{ name = "Jeremie Fraeys", email = "qenit8mf@duck.com" }]

dependencies = ["requests>=2.32.0", "cryptography>=44.0.0", "dnspython>=2.6.0"]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "debugpy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "requests-mock>=1.10.0",
    "tox>=4.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "build>=1.0.0",
    "twine>=5.0.0",
]

[project.urls]
Homepage = "https://github.com/jfraeys/acme-linode-objectstorage"
Source = "https://github.com/jfraeys/acme-linode-objectstorage"
"Source Upstream" = "https://github.com/dcoles/acme-linode-objectstorage"
"Bug Tracker" = "https://github.com/jfraeys/acme-linode-objectstorage/issues"
Documentation = "https://github.com/jfraeys/acme-linode-objectstorage#readme"

[project.scripts]
acme-linode = "acme_linode_objectstorage.cli:main"

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests*", "docs*", "*.egg-info"]

[tool.setuptools.package-data]
acme_linode_objectstorage = ["py.typed"]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "-v",
    "--strict-markers",
    "--cov=acme_linode_objectstorage",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=json",
]

[tool.coverage.run]
source = ["acme_linode_objectstorage"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
